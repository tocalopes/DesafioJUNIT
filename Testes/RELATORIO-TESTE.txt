Nome: Gabriel Lopes Pontes RM: 81523


import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class TesteJulgamentoPrisioneiroTest {
	   
   private int PENA_INOCENCIA = 0;
   private int PENA_CONDENACAO_MUTUA = 5;
   private int PENA_CONDENACAO_INDIVIDUAL = 10;
   private int PENA_CONDENACAO_CUMPLICES = 1;
	
	@Test
	public void calculaPena1() {
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		String respostaPrisioneiroA = "Culpado";
		String respostaPrisioneiroB = "Culpado";
		int expected = PENA_CONDENACAO_MUTUA;
		int actual = jp.calculaPena(respostaPrisioneiroA,respostaPrisioneiroB);
		assertEquals(expected, actual);
	}
	
	@Test
	public void calculaPena2() {
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		String respostaPrisioneiroA = "Culpado";
		String respostaPrisioneiroB = "bolo";
		int expected = PENA_CONDENACAO_INDIVIDUAL;
		int actual = jp.calculaPena(respostaPrisioneiroA,respostaPrisioneiroB);
		assertEquals(expected, actual);
	}
	
	@Test
	public void calculaPena3() {
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		String respostaPrisioneiroA = "bolo";
		String respostaPrisioneiroB = "Culpado";
		int expected = PENA_CONDENACAO_CUMPLICES;
		int actual = jp.calculaPena(respostaPrisioneiroA,respostaPrisioneiroB);
		assertEquals(expected, actual);
	}
	
	@Test
	public void calculaPena4() {
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		String respostaPrisioneiroA = "bolo";
		String respostaPrisioneiroB = "bolo";
		int expected = PENA_INOCENCIA;
		int actual = jp.calculaPena(respostaPrisioneiroA,respostaPrisioneiroB);
		assertEquals(expected, actual);
	}

}



1) TESTE

ERRO: O método calculaPena da classe JulgamentoPrisioneiro não está recebendo parâmetro do tipo String, e sim de um tipo "Resposta".

LOG: java.lang.Error: Unresolved compilation problem: 
	The method calculaPena(String, String) is undefined for the type JulgamentoPrisioneiro

RESOLUÇÃO
	Para Corrigir o erro, defini os parâmetros como do tipo String
	TRECHO DA CLASE => JulgamentoPrisioneiro: public int calculaPena(String respostaPrisioneiroA, String respostaPrisioneiroB) {

2) TESTE

ERRO:o método compara os parâmetros recebidos (que são do tipo string) com o atributo DELAÇÃO de uma classe Resposta.

LOG: java.lang.Error: Unresolved compilation problems: 
	Resposta cannot be resolved to a variable
	Resposta cannot be resolved to a variable
	Resposta cannot be resolved to a variable

RESOLUÇÃO : Substituição de todos os atributos da classe resposta pela string "Culpado"
	TRECHOS DA CLASE => JulgamentoPrisioneiro:     if (respostaPrisioneiroA == "Culpado") {
         						 if (respostaPrisioneiroB == "Culpado") {
								if (respostaPrisioneiroB == "Culpado") {


3) TESTE

ERRO: O primeiro teste deveria receber o valor 0(PENA_INOCENCIA), mas recebeu 15.

LOG:org.opentest4j.AssertionFailedError: expected: <0> but was: <15>
	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:195)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:152)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:147)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:510)
	at TesteJulgamentoPrisioneiroTest.calculaPena(TesteJulgamentoPrisioneiroTest.java:20)


CORREÇÃO: Foi corrido além da classeJulgamentoPrisioneiro um erro que havia cometido no TesteJulgamento, havia criado
	um método a mais, tive que excluilo.
	
	TRECHO EXCLUIDO "	@Test
	public void calculaPena() {
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		String respostaPrisioneiroA = "Culpado";
		String respostaPrisioneiroB = "Culpado";
		int expected = PENA_INOCENCIA;
		int actual = jp.calculaPena(respostaPrisioneiroA,respostaPrisioneiroB);
		assertEquals(expected, actual);
	}"
	Além disso, foram modificados os valores das variaveis na classe julgamentoPrisioneiro, além de alguns dos retornos
	do método calculaPena
	TRECHOS =>    private int PENA_INOCENCIA = 0;
  			 private int PENA_CONDENACAO_MUTUA = 5;
  	 		private int PENA_CONDENACAO_INDIVIDUAL = 10;
  			 private int PENA_CONDENACAO_CUMPLICES = 1;
      return PENA_CONDENACAO_MUTUA;
          } else {
                 return PENA_CONDENACAO_INDIVIDUAL;
                 }
       }
	

4)TESTE
	
	ERRO: o MÉTODO calculaPena3 do JUNIt esperava 1(PENA_CONDENAÇÃO_CUMPLICES) mas receber 10(PENA_CONDENACAO_INDIVIDUAL)
	LOG:org.opentest4j.AssertionFailedError: expected: <1> but was: <10>
	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:195)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:152)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:147)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:510)
	at TesteJulgamentoPrisioneiroTest.calculaPena3(TesteJulgamentoPrisioneiroTest.java:40)

RESOLUÇÃO: troquei o retorno PENA_CONDENAÇÃO_INDIDUAL por PENA_CONDENAÇÃO_CUMPLICES

     if (respostaPrisioneiroB == "Culpado") {
                    return PENA_CONDENACAO_CUMPLICES;


	
5)eERRO:O ULTIMO método do JUNIT de teste espera receber 0(PENA_INOCENCIA) MAS RECEBEU 10( PENA_CONDENACAO_INDIVIDUAL)

log:org.opentest4j.AssertionFailedError: expected: <0> but was: <10>
	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)
	at org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:195)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:152)
	at org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:147)
	at org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:510)
	at TesteJulgamentoPrisioneiroTest.calculaPena4(TesteJulgamentoPrisioneiroTest.java:50)

	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)


CORREÇÃO: TROCAR O ULTIMO retorno da clase JulgamentoPrisioneiro por PENA_INOSCENCIA

TRECHO:    } else {
                    return PENA_INOCENCIA;
                        }
                }


6)Versão final JUNIT

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class TesteJulgamentoPrisioneiroTest {
	   
   private int PENA_INOCENCIA = 0;
   private int PENA_CONDENACAO_MUTUA = 5;
   private int PENA_CONDENACAO_INDIVIDUAL = 10;
   private int PENA_CONDENACAO_CUMPLICES = 1;

	
	@Test
	public void calculaPena1() {
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		String respostaPrisioneiroA = "Culpado";
		String respostaPrisioneiroB = "Culpado";
		int expected = PENA_CONDENACAO_MUTUA;
		int actual = jp.calculaPena(respostaPrisioneiroA,respostaPrisioneiroB);
		assertEquals(expected, actual);
	}
	
	@Test
	public void calculaPena2() {
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		String respostaPrisioneiroA = "Culpado";
		String respostaPrisioneiroB = "bolo";
		int expected = PENA_CONDENACAO_INDIVIDUAL;
		int actual = jp.calculaPena(respostaPrisioneiroA,respostaPrisioneiroB);
		assertEquals(expected, actual);
	}
	
	@Test
	public void calculaPena3() {
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		String respostaPrisioneiroA = "bolo";
		String respostaPrisioneiroB = "Culpado";
		int expected = PENA_CONDENACAO_CUMPLICES;
		int actual = jp.calculaPena(respostaPrisioneiroA,respostaPrisioneiroB);
		assertEquals(expected, actual);
	}
	
	@Test
	public void calculaPena4() {
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		String respostaPrisioneiroA = "bolo";
		String respostaPrisioneiroB = "bolo";
		int expected = PENA_INOCENCIA;
		int actual = jp.calculaPena(respostaPrisioneiroA,respostaPrisioneiroB);
		assertEquals(expected, actual);
	}

}

VERSÃO FINAL CLASSE JulgamentoPrisioneiro

public class JulgamentoPrisioneiro {
   private int PENA_INOCENCIA = 0;
   private int PENA_CONDENACAO_MUTUA = 5;
   private int PENA_CONDENACAO_INDIVIDUAL = 10;
   private int PENA_CONDENACAO_CUMPLICES = 1;

   public int calculaPena(String respostaPrisioneiroA, String respostaPrisioneiroB) {
      if (respostaPrisioneiroA == "Culpado") {
          if (respostaPrisioneiroB == "Culpado") {
            return PENA_CONDENACAO_MUTUA;
          } else {
                 return PENA_CONDENACAO_INDIVIDUAL;
                 }
       } else {
                if (respostaPrisioneiroB == "Culpado") {
                    return PENA_CONDENACAO_CUMPLICES;
                } else {
                         return PENA_INOCENCIA;
                        }
                }
     }
}







	






